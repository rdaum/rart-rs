searchState.loadedDescShard("rart", 0, "RART - Ryan’s Adaptive Radix Tree\nInternal node type used by the tree implementation.\nCore trait defining the interface for tree operations.\nGet a value by key (generic version).\nGet a value by key reference (direct version).\nGet a mutable reference to a value by key (generic …\nGet a mutable reference to a value by key reference …\nInsert a key-value pair (generic version).\nInsert a key-value pair using key reference (direct …\nCheck if the tree is empty.\nIterator implementation for RART.\nCreate an iterator over all key-value pairs in the tree.\nKey types and traits for RART.\nPartial key types and traits for RART.\nRange query implementation for RART.\nCreate an iterator over key-value pairs within a specified …\nRemove a key-value pair (generic version).\nRemove a key-value pair using key reference (direct …\nStatistics and introspection for RART.\nAdaptive Radix Tree implementation.\nIterator over all key-value pairs in an Adaptive Radix …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait for types that can be used as keys in an Adaptive …\nMaximum size of this key type, if any.\nThe partial type associated with this key type.\nGet the byte at the specified position.\nExtend this key with bytes from a partial.\nGet the length of the key starting from the specified …\nCheck if this key matches the given byte slice exactly.\nCreate a new key from a partial.\nCreate a new key from a byte slice.\nConvert part of this key to a partial starting from the …\nTruncate this key to the specified depth.\nA fixed-size key type that stores up to N bytes on the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n(Convenience function. Not all keys can be assumed to be …\nA variable-size key type that stores data on the heap.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the byte at <code>pos</code>.\nReturns true if the partial ends with the given suffix.\nReturns true if the partial is empty.\nReturns an iterator over the bytes in the partial.\nReturns the length of the partial.\nReturns a partial from <code>start</code> onwards.\nReturns a partial up to <code>length</code> bytes.\nExtends the partial with another partial.\nReturns a partial from <code>src_offset</code> onwards with <code>length</code> …\nReturns the length of the common prefix between <code>self</code> and …\nReturns the length of the common prefix between <code>self</code> and …\nReturns the length of the common prefix between <code>self</code> and …\nReturns true if the partial starts with the given prefix.\nReturn a slice form of the partial. Warning: could take …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterator over key-value pairs within a specified range in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn Adaptive Radix Tree (ART) - a high-performance, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")